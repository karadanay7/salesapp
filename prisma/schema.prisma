generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Store model representing stores registered by users
model Store {
  id            Int         @id @default(autoincrement())
  userId        String      @db.Uuid
  isApproved    Boolean     @default(false) // Whether the store is approved by admin
  nameSurname   String      // Name of the store owner
  companyType   CompanyType @relation(fields: [companyTypeId], references: [id]) // Relation with CompanyType
  companyTypeId Int         // Foreign key referencing CompanyType
  idTaxNo       String      @unique     // Tax identification number
  phone         String      @unique     // Phone number of the store
  companyName   String      // Name of the company
  city          String      // City where the store is located
  district      String      // District where the store is located
  addressLine   String      // Address of the store
  url           String      // Optional shop image URL
  createdAt     DateTime    @default(now()) @db.Timestamptz(6)
  sales         Sale[]      // One-to-many relationship: a store can have multiple sales
  category      Category    @relation(fields: [categoryId], references: [id]) // Category of the store
  categoryId    Int        // Foreign key referencing Category
}

// Sale model representing special offers in stores
model Sale {
  id              Int      @id @default(autoincrement())
  store           Store    @relation(fields: [storeId], references: [id])
  storeId         Int      // Foreign key referencing Store
  name            String   // Name of the sale
  description     String   // Description of the sale
  percentage      Int     // If sale is percentage-based
  products        String[] // Array of product names on sale
  timespanStart   DateTime @db.Timestamptz(6)
  timespanEnd     DateTime @db.Timestamptz(6)
  url             String   // URL for the sale
  available       String[]
  createdAt       DateTime @default(now()) @db.Timestamptz(6)
}

// Category model representing different categories of stores
model Category {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  stores   Store[]  // One-to-many relationship: a category can have multiple stores
}

// CompanyType model representing different types of companies
model CompanyType {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  stores   Store[]  // One-to-many relationship: a company type can have multiple stores
}
